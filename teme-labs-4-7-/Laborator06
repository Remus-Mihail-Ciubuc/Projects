#include <stdio.h>
#include <string.h>
#include "mpi.h"

int max(int a, int b)
{
	if(a>b)
		return a;
	return b;
}
int main(int argc, char* argv[]){
	int  my_rank; /* rank of process */
	int  p;       /* number of processes */
	//int source;   /* rank of sender */
	//int dest;     /* rank of receiver */
	int tag=0;    /* tag for messages */
	//char message[100];        /* storage for message */
	MPI_Status status ;   /* return status for receive */
	//int A[16]={0,0,0,0,0,0,0,0,3,7,8,3,9,2,3,1};
	int A[16]={0,0,0,0,0,0,0,0,3,2,1,6,5,4,2,9};
	/* start up MPI */
	int B[16]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	MPI_Init(&argc, &argv);
	
	/* find out process rank */
	MPI_Comm_rank(MPI_COMM_WORLD, &my_rank); 
	
	/* find out number of processes */
	MPI_Comm_size(MPI_COMM_WORLD, &p); 
	
	
	if (my_rank !=0){
		if(my_rank >= p/2)
			MPI_Send(&A[my_rank],1,MPI_INT,my_rank/2,tag, MPI_COMM_WORLD);
		else
		{
			int x,y;
			MPI_Recv(&x,1, MPI_INT, 2*my_rank, tag, MPI_COMM_WORLD, &status);
			MPI_Recv(&y,1, MPI_INT, 2*my_rank+1, tag, MPI_COMM_WORLD, &status);
			//A[my_rank]=max(x,y);
			A[my_rank]=x+y;
			if(my_rank !=1 ){
				MPI_Send(&A[my_rank],1,MPI_INT,my_rank/2,tag, MPI_COMM_WORLD);
			}
			else
				printf("%d\n",A[my_rank]);
		}

	}
	if(my_rank!=0)
	{
		B[1]=A[1];
		if (my_rank == 1){
			MPI_Send(&B[my_rank],1,MPI_INT,2,tag, MPI_COMM_WORLD);
			MPI_Send(&B[my_rank],1,MPI_INT,3,tag, MPI_COMM_WORLD);
		}else
		{
			if(my_rank % 2 == 1)
			{
				int y;
				MPI_Recv(&y,1, MPI_INT, my_rank/2, tag, MPI_COMM_WORLD, &status);
				B[my_rank]=y;
				MPI_Send(&A[my_rank],1,MPI_INT,my_rank-1,tag, MPI_COMM_WORLD);
			}else
			{
				int x,y;
				MPI_Recv(&x,1, MPI_INT, my_rank/2, tag, MPI_COMM_WORLD, &status);
				MPI_Recv(&y,1, MPI_INT, my_rank+1, tag, MPI_COMM_WORLD, &status);
				B[my_rank]=x-y;
					}
			if(my_rank<p/2)
			{
				MPI_Send(&B[my_rank],1,MPI_INT,2*my_rank,tag, MPI_COMM_WORLD);
				MPI_Send(&B[my_rank],1,MPI_INT,2*my_rank+1,tag, MPI_COMM_WORLD);
			}
			if(my_rank>=p/2)
				printf("B[%d]=%d \n" ,my_rank,B[my_rank]);

		}

	}

	MPI_Finalize(); 
	
	
	return 0;
}
